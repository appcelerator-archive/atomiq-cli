{"version":3,"sources":["../../src/bin/atomiq.js"],"names":[],"mappings":";;;;;;;;;AAKA;;AACA;;AAEA;;IAAY,K;;AACZ;;IAAY,M;;AACZ;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,oBACG,OADH,CACW,kBAAI,OADf,EAEG,OAFH,CAEW,aAFX,EAE0B,aAF1B;;AAKA,IAAI,MAAM,IAAI,GAAJ,CAAQ,CAChB,CAAC,KAAD,EAAQ;AACN,eAAa,yBADP;AAEN,UAAQ;AAFF,CAAR,CADgB,EAKhB,CAAC,IAAD,EAAO;AACL,eAAa,wBADR;AAEL,UAAQ;AAFH,CAAP,CALgB,EAShB,CAAC,MAAD,EAAS;AACP,eAAa,8BADN;AAEP,UAAQ;AAFD,CAAT,CATgB,EAahB,CAAC,OAAD,EAAU;AACR,eAAa,kCADL;AAER,UAAQ;AAFA,CAAV,CAbgB,EAiBhB,CAAC,KAAD,EAAQ;AACN,eAAa,mCADP;AAEN,UAAQ;AAFF,CAAR,CAjBgB,CAAR,CAAV;;;;;;;AAuBA,uBAAyB,GAAzB,8HAA8B;AAAA;;AAAA,QAApB,GAAoB;AAAA,QAAf,KAAe;;AAC5B,wBACG,OADH,CACW,GADX,EAEG,WAFH,CAEe,MAAM,WAFrB,EAGG,MAHH,CAGU,QAAQ,MAAM,MAAd,CAHV;AAID;;;;;;;;;;;;;;;;AAED,oBAAI,KAAJ,CAAU,QAAQ,IAAlB;;AAEA,SAAS,OAAT,CAAiB,EAAjB,EAAqB;AAAA;;AACnB,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAEG,IAFH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAIH,kBAAM,KAAN;AACA,oBAAQ,IAAR,CAAa,CAAb;;AALG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAQD;;;;;AAKD,SAAe,MAAf,CAAsB,OAAtB;AAAA,MACQ,GADR,EAIM,IAJN,EAKM,OALN,EAWM,MAXN;AAAA;AAAA;AAAA;AAAA;AACQ,aADR,GACc,qBAAM,gBAAN,CADd;;AAEE,cAAI,oBAAJ;;AAEI,cAJN,GAIa,QAAQ,GAAR,EAJb;AAKM,iBALN,GAKgB;AACZ,kBAAM;AADM,WALhB;AAAA;AAAA,0CASkB,OAAO,UAAP,CAAkB,OAAlB,CATlB;;AAAA;AASE,iBATF;AAWM,gBAXN,GAWe,eAAK,IAAL,CAAU,SAAV,uBAAwC,QAAQ,IAAhD,eAXf;;;AAaE,wBAAI,MAAJ,CAAW,MAAX,EAAmB,IAAnB,EAAyB,OAAzB;;AAEA,gBAAM,EAAN,CAAS,0DAAT,EACE,gBAAM,IAAN,CAAW,WAAW,QAAQ,IAA9B,CADF,EAEE,gBAAM,IAAN,CAAW,sBAAX,CAFF,EAGE,gBAAM,IAAN,CAAW,cAAX,CAHF;;AAfF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqBA,SAAS,YAAT,CAAsB,OAAtB,EAA+B;AAC7B,MAAM,MAAM,qBAAM,YAAN,CAAZ;AACA,MAAI,wBAAJ;AACA,gBAAI,EAAJ,CAAO,OAAP;AACD;;AAED,SAAS,aAAT,CAAuB,OAAvB,EAAgC;AAC9B,MAAM,MAAM,qBAAM,iBAAN,CAAZ;AACA,MAAI,0BAAJ;AACA,gBAAI,IAAJ,CAAS,OAAT;AACD;;AAED,SAAS,cAAT,CAAwB,OAAxB,EAAiC;AAC/B,MAAM,MAAM,qBAAM,kBAAN,CAAZ;AACA,MAAI,kCAAJ;AACA,gBAAI,KAAJ,CAAU,OAAV;AACD;;AAED,SAAS,GAAT,CAAa,OAAb,EAAsB;AACpB,MAAM,MAAM,qBAAM,gBAAN,CAAZ;AACA,MAAI,6BAAJ;AACA,gBAAI,GAAJ,CAAQ,OAAR;AACD","file":"atomiq.js","sourcesContent":["\n\n/* eslint-disable no-console */\n\n// init babel and stack trace support\nimport 'babel-polyfill'\nimport 'source-map-support/register'\n\nimport * as print from '../lib/io/print'\nimport * as prompt from '../lib/io/prompt'\nimport App from '../lib/commands/App'\nimport chalk from 'chalk'\nimport cli from 'commander'\nimport debug from 'debug'\nimport path from 'path'\nimport pkg from '../../package.json'\n\ncli\n  .version(pkg.version)\n  .command('make <task>', 'build tasks')\n\n\nlet map = new Map([\n  ['new', {\n    description: 'Create a new atomiq app',\n    action: create\n  }],\n  ['up', {\n    description: 'Run app in a container',\n    action: runContainer\n  }],\n  ['test', {\n    description: 'Run app tests in a container',\n    action: testContainer\n  }],\n  ['debug', {\n    description: 'Debug app running in a container',\n    action: debugContainer\n  }],\n  ['url', {\n    description: 'Get URL (IP:PORT) for running app',\n    action: url\n  }],\n])\n\nfor (let [key, value] of map) {\n  cli\n    .command(key)\n    .description(value.description)\n    .action(trywrap(value.action))\n}\n\ncli.parse(process.argv)\n\nfunction trywrap(fn) {\n  return async () => {\n    try {\n      await fn()\n    } catch (err) {\n      print.error(err)\n      process.exit(1)\n    }\n  }\n}\n\n/**\n * Create a new app.\n */\nasync function create(options) {\n  const log = debug('atomiq:app:new')\n  log('Creating a new app')\n\n  let dest = process.cwd()\n  let context = {\n    type: 'api'\n  }\n\n  context = await prompt.newProject(context)\n\n  let source = path.join(__dirname, `../../generator/${context.type}/template`)\n\n  App.create(source, dest, context)\n\n  print.ok('To run the app in a Docker container, enter:\\n%s\\n%s\\n%s',\n    chalk.bold('   cd ' + context.name),\n    chalk.bold('   atomiq make build'),\n    chalk.bold('   atomiq up'))\n}\n\nfunction runContainer(options) {\n  const log = debug('atomiq:new')\n  log('Run app in a container')\n  App.up(options)\n}\n\nfunction testContainer(options) {\n  const log = debug('atomiq:app:test')\n  log('Run tests in a container')\n  App.test(options)\n}\n\nfunction debugContainer(options) {\n  const log = debug('atomiq:app:debug')\n  log('Debug app running in a container')\n  App.debug(options)\n}\n\nfunction url(options) {\n  const log = debug('atomiq:app:url')\n  log('Getting URL for running app')\n  App.url(options)\n}\n"]}