{"version":3,"sources":["../../src/bin/atomiq-make.js"],"names":[],"mappings":";;;;;;;AAGA;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAI,MAAM,IAAI,GAAJ,CAAQ,CAChB,CAAE,OAAF,EAAW,EAAE,aAAa,kDAAb,EAAiE,QAAQ,KAAR,EAA9E,CADgB,EAEhB,CAAE,MAAF,EAAU,EAAE,aAAa,sCAAb,EAAqD,QAAQ,IAAR,EAAjE,CAFgB,EAGhB,CAAE,OAAF,EAAW,EAAE,aAAa,kCAAb,EAAiD,QAAQ,KAAR,EAA9D,CAHgB,EAIhB,CAAE,OAAF,EAAW,EAAE,aAAa,wCAAb,EAAuD,QAAQ,KAAR,EAApE,CAJgB,EAKhB,CAAE,SAAF,EAAa,EAAE,aAAa,kDAAb,EAAiE,QAAQ,OAAR,EAAhF,CALgB,CAAR,CAAN;;;;;;;AAQJ,uBAAyB,6BAAzB,oGAA8B;;;QAApB,qBAAoB;QAAf,uBAAe;;AAC5B,wBACG,OADH,CACW,GADX,EAEG,WAFH,CAEe,MAAM,WAAN,CAFf,CAGG,MAHH,CAGU,MAAM,MAAN,CAHV,CAD4B;GAA9B;;;;;;;;;;;;;;;;AAQA,oBAAI,KAAJ,CAAU,QAAQ,IAAR,CAAV;;AAEA,SAAS,OAAT,CAAiB,IAAjB,EAAgC;AAC9B,MAAM,MAAM,sCAAqB,IAArB,CAAN,CADwB;AAE9B,wBAAoB,IAApB,EAF8B;AAG9B,MAAM,OAAO,oBAAP,CAHwB;AAI9B,MAAI;AACF,SAAK,IAAL,GADE;;sCAJoB;;KAIpB;;AAEF,SAAK,KAAL,aAAc,IAAd,EAFE;GAAJ,CAGE,OAAO,GAAP,EAAY;AACZ,YAAQ,GAAR,CAAY,SAAZ,EAAuB,gBAAM,GAAN,CAAU,OAAV,CAAvB,EAA2C,IAAI,OAAJ,CAA3C,CADY;AAEZ,YAAQ,IAAR,CAAa,CAAb,EAFY;GAAZ;CAPJ;;;;;AAgBA,SAAS,KAAT,CAAe,OAAf,EAAwB;AACtB,UAAQ,OAAR,EADsB;CAAxB;;;;;;AAQA,SAAS,IAAT,CAAc,OAAd,EAAuB;AACrB,UADqB;AAErB,UAAQ,MAAR,EAFqB;CAAvB;;;;;;AASA,SAAS,KAAT,CAAe,OAAf,EAAwB;AACtB,SADsB;AAEtB,UAAQ,OAAR,EAFsB;CAAxB;;;;;AAQA,SAAS,KAAT,CAAe,OAAf,EAAwB;AACtB,UADsB;AAEtB,UAAQ,OAAR,EAFsB;CAAxB;;;;;AAQA,SAAS,OAAT,CAAiB,OAAjB,EAA0B;AACxB,UADwB;AAExB,UAAQ,SAAR,EAFwB;CAA1B","file":"atomiq-make.js","sourcesContent":["/* eslint-disable no-console */\n\n// init babel and stack trace support\nimport 'babel-polyfill';\nimport 'source-map-support/register';\n\nimport chalk from 'chalk';\nimport cli from 'commander';\nimport debug from 'debug';\nimport Make from '../lib/commands/Make';\n\nlet map = new Map([\n  [ 'clean', { description: 'Removes project build artifacts (dist directory)', action: clean }],\n  [ 'dist', { description: 'Ensures all files are copied to dist', action: dist }],\n  [ 'babel', { description: 'Transpiles src to dist directory', action: babel }],\n  [ 'build', { description: 'Build the Docker image for the project', action: build }],\n  [ 'rebuild', { description: 'Force rebuild fresh Docker image for the project', action: rebuild }]\n]);\n\nfor (let [key, value] of map) {\n  cli\n    .command(key)\n    .description(value.description)\n    .action(value.action)\n    ;\n}\n\ncli.parse(process.argv);\n\nfunction runtask(task, ...args) {\n  const log = debug(`atomiq:make:${task}`);\n  log(`running task ${task}`);\n  const make = new Make();\n  try {\n    make.init();\n    make[task](...args);\n  } catch (err) {\n    console.log('[%s] %s', chalk.red('error'), err.message);\n    process.exit(1);\n  }\n}\n\n/**\n * Removes the dist directory.\n */\nfunction clean(options) {\n  runtask('clean');\n}\n\n/**\n * Copies all files over to the dist directory\n * (not just the transpiled sources).\n */\nfunction dist(options) {\n  clean();\n  runtask('dist');\n}\n\n/**\n * Transpile all the ES6 files in src and place\n * ES5 files and sourcemaps in the dist directory.\n */\nfunction babel(options) {\n  dist();\n  runtask('babel');\n}\n\n/**\n * Build the Docker image for the project.\n */\nfunction build(options) {\n  babel();\n  runtask('build');\n}\n\n/**\n * Rebuild the Docker image for the project.\n */\nfunction rebuild(options) {\n  babel();\n  runtask('rebuild');\n}\n"]}