{"version":3,"sources":["../../src/bin/atomiq-make.js"],"names":[],"mappings":";;;;;;;;;;;QAkFgB,K,GAAA,K;;AA/EhB;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAI,MAAM,IAAI,GAAJ,CAAQ,CAChB,CAAC,OAAD,EAAU;AACR,eAAa,kDADL;AAER,UAAQ;AAFA,CAAV,CADgB,EAKhB,CAAC,MAAD,EAAS;AACP,eAAa,sCADN;AAEP,UAAQ;AAFD,CAAT,CALgB,EAShB,CAAC,OAAD,EAAU;AACR,eAAa,kCADL;AAER,UAAQ;AAFA,CAAV,CATgB,EAahB,CAAC,OAAD,EAAU;AACR,eAAa,wCADL;AAER,UAAQ;AAFA,CAAV,CAbgB,EAiBhB,CAAC,SAAD,EAAY;AACV,eAAa,kDADH;AAEV,UAAQ;AAFE,CAAZ,CAjBgB;;AAsBhB,CAAC,YAAD,EAAe;AACb,eAAa,yCADA;AAEb,UAAQ;AAFK,CAAf,CAtBgB,CAAR,CAAV;;;;;;;AA4BA,uBAAyB,GAAzB,8HAA8B;AAAA;;AAAA,QAApB,GAAoB;AAAA,QAAf,KAAe;;AAC5B,wBACG,OADH,CACW,GADX,EAEG,WAFH,CAEe,MAAM,WAFrB,EAGG,MAHH,CAGU,MAAM,MAHhB;AAKD;;;;;;;;;;;;;;;;AAED,oBAAI,KAAJ,CAAU,QAAQ,IAAlB;;AAEA,SAAS,OAAT,CAAiB,IAAjB,EAAgC;AAC9B,MAAM,MAAM,sCAAqB,IAArB,CAAZ;AACA,wBAAoB,IAApB;AACA,MAAM,OAAO,oBAAb;AACA,MAAI;AACF,SAAK,IAAL;;AADE,sCAJoB,IAIpB;AAJoB,UAIpB;AAAA;;AAEF,SAAK,IAAL,cAAc,IAAd;AACD,GAHD,CAGE,OAAO,GAAP,EAAY;AACZ,YAAQ,GAAR,CAAY,SAAZ,EAAuB,gBAAM,GAAN,CAAU,OAAV,CAAvB,EAA2C,IAAI,OAA/C;AACA,YAAQ,IAAR,CAAa,CAAb;AACD;AACF;;;;;AAKD,SAAS,KAAT,CAAe,OAAf,EAAwB;AACtB,UAAQ,OAAR;AACD;;;;;;AAMD,SAAS,IAAT,CAAc,OAAd,EAAuB;AACrB;AACA,UAAQ,MAAR;AACD;;;;;;AAMM,SAAS,KAAT,CAAe,OAAf,EAAwB;AAC7B;AACA,UAAQ,OAAR;AACD;;;;;AAKD,SAAS,KAAT,CAAe,OAAf,EAAwB;AACtB;AACA,UAAQ,OAAR;AACD;;;;;AAKD,SAAS,OAAT,CAAiB,OAAjB,EAA0B;AACxB;AACA,UAAQ,SAAR;AACD;;;;;AAKD,SAAS,QAAT,CAAkB,OAAlB,EAA2B;AACzB;AACA,UAAQ,UAAR;AACD;;;;;AAKD,SAAS,SAAT,CAAmB,OAAnB,EAA4B;AAC1B,UAAQ,WAAR;AACD","file":"atomiq-make.js","sourcesContent":["/* eslint-disable no-console */\n\n// init babel and stack trace support\nimport 'babel-polyfill'\nimport 'source-map-support/register'\n\nimport chalk from 'chalk'\nimport cli from 'commander'\nimport debug from 'debug'\nimport Make from '../lib/commands/Make'\n\nlet map = new Map([\n  ['clean', {\n    description: 'Removes project build artifacts (dist directory)',\n    action: clean\n  }],\n  ['dist', {\n    description: 'Ensures all files are copied to dist',\n    action: dist\n  }],\n  ['babel', {\n    description: 'Transpiles src to dist directory',\n    action: babel\n  }],\n  ['build', {\n    description: 'Build the Docker image for the project',\n    action: build\n  }],\n  ['rebuild', {\n    description: 'Force rebuild fresh Docker image for the project',\n    action: rebuild\n  }],\n  //  [ 'watch-src', { description: 'Watch src directory and update dist', action: watchsrc }],\n  ['watch-dist', {\n    description: 'Watch dist directory and restart server',\n    action: watchdist\n  }],\n])\n\nfor (let [key, value] of map) {\n  cli\n    .command(key)\n    .description(value.description)\n    .action(value.action)\n\n}\n\ncli.parse(process.argv)\n\nfunction runtask(task, ...args) {\n  const log = debug(`atomiq:make:${task}`)\n  log(`running task ${task}`)\n  const make = new Make()\n  try {\n    make.init()\n    make[task](...args)\n  } catch (err) {\n    console.log('[%s] %s', chalk.red('error'), err.message)\n    process.exit(1)\n  }\n}\n\n/**\n * Removes the dist directory.\n */\nfunction clean(options) {\n  runtask('clean')\n}\n\n/**\n * Copies all files over to the dist directory\n * (not just the transpiled sources).\n */\nfunction dist(options) {\n  clean()\n  runtask('dist')\n}\n\n/**\n * Transpile all the ES6 files in src and place\n * ES5 files and sourcemaps in the dist directory.\n */\nexport function babel(options) {\n  dist()\n  runtask('babel')\n}\n\n/**\n * Build the Docker image for the project.\n */\nfunction build(options) {\n  babel()\n  runtask('build')\n}\n\n/**\n * Rebuild the Docker image for the project.\n */\nfunction rebuild(options) {\n  babel()\n  runtask('rebuild')\n}\n\n/**\n * Watch the src directory and update dist.\n */\nfunction watchsrc(options) {\n  dist()\n  runtask('watchsrc')\n}\n\n/**\n * Watch the dist directory and restart server.\n */\nfunction watchdist(options) {\n  runtask('watchdist')\n}\n"]}