{"version":3,"sources":["../../src/bin/atomiq-app.js"],"names":[],"mappings":";;;;;;;AAGA;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAI,MAAM,IAAI,GAAJ,CAAQ,CAChB,CAAE,QAAF,EAAY,EAAE,aAAa,yBAAb,EAAwC,QAAQ,MAAR,EAAtD,CADgB,CAAR,CAAN;;;;;;;AAIJ,uBAAyB,6BAAzB,oGAA8B;;;QAApB,qBAAoB;QAAf,uBAAe;;AAC5B,wBACG,OADH,CACW,GADX,EAEG,WAFH,CAEe,MAAM,WAAN,CAFf,CAGG,MAHH,CAGU,MAAM,MAAN,CAHV,CAD4B;GAA9B;;;;;;;;;;;;;;;;AAQA,oBAAI,KAAJ,CAAU,QAAQ,IAAR,CAAV;;;;;AAKA,SAAS,MAAT,CAAgB,OAAhB,EAAyB;AACvB,MAAM,MAAM,qBAAM,mBAAN,CAAN,CADiB;AAEvB,MAAI,oBAAJ,EAFuB;;AAIvB,MAAI,SAAS,eAAK,IAAL,CAAU,SAAV,EAAqB,8BAArB,CAAT,CAJmB;AAKvB,MAAI,OAAO,QAAQ,GAAR,EAAP,CALmB;AAMvB,MAAI,UAAU;AACZ,UAAM,KAAN;GADE,CANmB;;AAUvB,MAAI;AACF,kBAAI,MAAJ,CAAW,MAAX,EAAmB,IAAnB,EAAyB,OAAzB,EADE;AAEF,YAAQ,GAAR,CAAY,qFAAZ,EACE,gBAAM,IAAN,CAAW,IAAX,CADF,EAEE,gBAAM,IAAN,CAAW,WAAW,QAAQ,IAAR,CAFxB,EAGE,gBAAM,IAAN,CAAW,gBAAX,CAHF,EAIE,gBAAM,IAAN,CAAW,eAAX,CAJF,EAKE,gBAAM,IAAN,CAAW,WAAX,CALF,EAFE;GAAJ,CAQE,OAAO,GAAP,EAAY;AACZ,YAAQ,GAAR,CAAY,SAAZ,EAAuB,gBAAM,GAAN,CAAU,OAAV,CAAvB,EAA2C,IAAI,OAAJ,CAA3C,CADY;AAEZ,YAAQ,IAAR,CAAa,CAAb,EAFY;GAAZ;CAlBJ","file":"atomiq-app.js","sourcesContent":["/* eslint-disable no-console */\n\n// init babel and stack trace support\nimport 'babel-polyfill';\nimport 'source-map-support/register';\n\nimport App from '../lib/commands/App';\nimport chalk from 'chalk';\nimport cli from 'commander';\nimport debug from 'debug';\nimport path from 'path';\n\nlet map = new Map([\n  [ 'create', { description: 'Create a new atomiq app', action: create }]\n]);\n\nfor (let [key, value] of map) {\n  cli\n    .command(key)\n    .description(value.description)\n    .action(value.action)\n    ;\n}\n\ncli.parse(process.argv);\n\n/**\n * Create a new app.\n */\nfunction create(options) {\n  const log = debug('atomiq:app:create');\n  log('Creating a new app');\n\n  let source = path.join(__dirname, '../../generator/app/template');\n  let dest = process.cwd();\n  let context = {\n    name: 'app'\n  };\n\n  try {\n    App.create(source, dest, context);\n    console.log('[%s] Try running the app (use `up` to run in a container). Enter:\\n%s\\n%s\\n%s or %s',\n      chalk.bold('OK'),\n      chalk.bold('   cd ' + context.name),\n      chalk.bold('   npm install'),\n      chalk.bold('   atomiq run'),\n      chalk.bold('atomiq up'));\n  } catch (err) {\n    console.log('[%s] %s', chalk.red('error'), err.message);\n    process.exit(1);\n  }\n}\n"]}