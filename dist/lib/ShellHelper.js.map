{"version":3,"sources":["../../src/lib/ShellHelper.js"],"names":[],"mappings":";;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEqB;;;;;;;2BAEE;AACnB,aAAO,mDAAP,CADmB;;;;4BAIC;AACpB,2DADoB;;;;2BAIR,UAAU;AACtB,UAAI;AACF,qBAAG,UAAH,CAAc,QAAd,EAAwB,aAAG,IAAH,CAAxB,CADE;AAEF,eAAO,IAAP,CAFE;OAAJ,CAGE,OAAO,GAAP,EAAY;AACZ,eAAO,KAAP,CADY;OAAZ;;;;4BAKW,QAAQ,MAA2C;UAArC,gEAAU,EAAE,SAAS,IAAT,kBAAyB;UAAR,sBAAQ;;AAChE,wBAAM,KAAN,CAAY,IAAZ,EAAkB,IAAlB,EADgE;AAEhE,UAAI,QAAQ,aAAG,WAAH,CAAe,MAAf,EAAuB,MAAvB,CAA8B,MAA9B,CAAR,CAF4D;AAGhE,YAAM,OAAN,CAAc,aAAK;AACjB,YAAI,UAAU,eAAK,IAAL,CAAU,MAAV,EAAkB,CAAlB,CAAV,CADa;AAEjB,YAAI,QAAQ,aAAG,QAAH,CAAY,OAAZ,CAAR,CAFa;AAGjB,YAAI,MAAM,MAAN,EAAJ,EAAoB;AAClB,cAAI,WAAW,eAAK,IAAL,CAAU,IAAV,EAAgB,CAAhB,CAAX,CADc;AAElB,4BAAM,EAAN,CAAS,OAAT,EAAkB,QAAlB,EAFkB;SAApB,MAGO,IAAI,MAAM,WAAN,MAAuB,QAAQ,OAAR,EAAiB;AACjD,sBAAY,OAAZ,CAAoB,eAAK,IAAL,CAAU,MAAV,EAAkB,CAAlB,CAApB,EAA0C,eAAK,IAAL,CAAU,IAAV,EAAgB,CAAhB,CAA1C,EAA8D,OAA9D,EAAuE,MAAvE,EADiD;SAA5C;OANK,CAAd,CAHgE;;;;4BAgB5C;AACpB,wBAAM,KAAN,qCADoB;;;;yBAIH;AACjB,wBAAM,EAAN,qCADiB;;;;yBAIA;AACjB,wBAAM,EAAN,qCADiB;;;;SA3CA","file":"ShellHelper.js","sourcesContent":["import { execSync, spawnSync } from 'child_process';\nimport fs from 'fs';\nimport path from 'path';\nimport shell from 'shelljs';\n\nexport default class ShellHelper {\n\n  static exec(...args) {\n    return execSync(...args);\n  }\n\n  static spawn(...args) {\n    spawnSync(...args);\n  }\n\n  static exists(pathname) {\n    try {\n      fs.accessSync(pathname, fs.R_OK);\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  static copyDir(source, dest, options = { recurse: true }, filter) {\n    shell.mkdir('-p', dest);\n    let files = fs.readdirSync(source).filter(filter);\n    files.forEach(f => {\n      let srcpath = path.join(source, f);\n      let stats = fs.statSync(srcpath);\n      if (stats.isFile()) {\n        let destpath = path.join(dest, f);\n        shell.cp(srcpath, destpath);\n      } else if (stats.isDirectory() && options.recurse) {\n        ShellHelper.copyDir(path.join(source, f), path.join(dest, f), options, filter);\n      }\n\n    });\n  }\n\n  static mkdir(...args) {\n    shell.mkdir(...args);\n  }\n\n  static cp(...args) {\n    shell.cp(...args);\n  }\n\n  static rm(...args) {\n    shell.rm(...args);\n  }\n}\n"]}