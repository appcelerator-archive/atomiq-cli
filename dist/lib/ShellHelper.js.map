{"version":3,"sources":["../../src/lib/ShellHelper.js"],"names":[],"mappings":";;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEqB,W;WAAA,W;0BAAA,W;;;eAAA,W;;2BAEE;AACnB,aAAO,mDAAP;AACD;;;4BAEqB;AACpB;AACD;;;2BAEa,Q,EAAU;AACtB,UAAI;AACF,qBAAG,UAAH,CAAc,QAAd,EAAwB,aAAG,IAA3B;AACA,eAAO,IAAP;AACD,OAHD,CAGE,OAAO,GAAP,EAAY;AACZ,eAAO,KAAP;AACD;AACF;;;4BAEc,M,EAAQ,I,EAEV;AAAA,UAFgB,OAEhB,yDAF0B;AACnC,iBAAS;AAD0B,OAE1B;AAAA,UAAR,MAAQ;;AACX,wBAAM,KAAN,CAAY,IAAZ,EAAkB,IAAlB;AACA,UAAI,QAAQ,aAAG,WAAH,CAAe,MAAf,EAAuB,MAAvB,CAA8B,MAA9B,CAAZ;AACA,YAAM,OAAN,CAAc,aAAK;AACjB,YAAI,UAAU,eAAK,IAAL,CAAU,MAAV,EAAkB,CAAlB,CAAd;AACA,YAAI,QAAQ,aAAG,QAAH,CAAY,OAAZ,CAAZ;AACA,YAAI,MAAM,MAAN,EAAJ,EAAoB;AAClB,cAAI,WAAW,eAAK,IAAL,CAAU,IAAV,EAAgB,CAAhB,CAAf;AACA,4BAAM,EAAN,CAAS,OAAT,EAAkB,QAAlB;AACD,SAHD,MAGO,IAAI,MAAM,WAAN,MAAuB,QAAQ,OAAnC,EAA4C;AACjD,sBAAY,OAAZ,CAAoB,eAAK,IAAL,CAAU,MAAV,EAAkB,CAAlB,CAApB,EAA0C,eAAK,IAAL,CAAU,IAAV,EAAgB,CAAhB,CAA1C,EAA8D,OAA9D,EAAuE,MAAvE;AACD;AAEF,OAVD;AAWD;;;4BAEqB;AACpB,wBAAM,KAAN;AACD;;;yBAEkB;AACjB,wBAAM,EAAN;AACD;;;yBAEkB;AACjB,wBAAM,EAAN;AACD;;;SA/CkB,W;;;kBAAA,W","file":"ShellHelper.js","sourcesContent":["import { execSync, spawnSync } from 'child_process'\nimport fs from 'fs'\nimport path from 'path'\nimport shell from 'shelljs'\n\nexport default class ShellHelper {\n\n  static exec(...args) {\n    return execSync(...args)\n  }\n\n  static spawn(...args) {\n    spawnSync(...args)\n  }\n\n  static exists(pathname) {\n    try {\n      fs.accessSync(pathname, fs.R_OK)\n      return true\n    } catch (err) {\n      return false\n    }\n  }\n\n  static copyDir(source, dest, options = {\n      recurse: true\n    }, filter) {\n    shell.mkdir('-p', dest)\n    let files = fs.readdirSync(source).filter(filter)\n    files.forEach(f => {\n      let srcpath = path.join(source, f)\n      let stats = fs.statSync(srcpath)\n      if (stats.isFile()) {\n        let destpath = path.join(dest, f)\n        shell.cp(srcpath, destpath)\n      } else if (stats.isDirectory() && options.recurse) {\n        ShellHelper.copyDir(path.join(source, f), path.join(dest, f), options, filter)\n      }\n\n    })\n  }\n\n  static mkdir(...args) {\n    shell.mkdir(...args)\n  }\n\n  static cp(...args) {\n    shell.cp(...args)\n  }\n\n  static rm(...args) {\n    shell.rm(...args)\n  }\n}\n"]}