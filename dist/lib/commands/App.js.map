{"version":3,"sources":["../../../src/lib/commands/App.js"],"names":[],"mappings":";;;;;;;;AAAA;;IAAY,K;;AACZ;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;AAEA,IAAM,YAAY;AAChB,OAAK,QAAQ,GADG;AAEhB,SAAO;AAFS,CAAlB;;IAKqB,G;WAAA,G;0BAAA,G;;;eAAA,G;;2BAEL,M,EAAQ,I,EAAM,O,EAAS;AACnC,UAAI,sBAAM,MAAN,CAAa,eAAK,IAAL,CAAU,IAAV,EAAgB,QAAQ,IAAxB,CAAb,CAAJ,EAAiD;AAC/C,cAAM,IAAI,KAAJ,CAAU,iDAAV,CAAN;AACD;AACD,+BAAS,QAAT,CAAkB,MAAlB,EAA0B,IAA1B,EAAgC,OAAhC;AACD;;;uBAES,O,EAAS;AACjB,8BAAQ,EAAR,CAAW,SAAX;AACD;;;yBAEW,O,EAAS;AACnB,8BAAQ,IAAR,CAAa,SAAb;AACD;;;0BAEY,O,EAAS;AACpB,8BAAQ,KAAR,CAAc,SAAd;AACD;;;+BAEiB,O,EAAS;AACzB,8BAAQ,UAAR,CAAmB,SAAnB;AACD;;;wBAEU,O,EAAS;AAClB,UAAI,eAAJ;UACE,aADF;UAEE,aAFF;UAGE,YAHF;;AAKA,UAAI;AACF,iBAAS,sBAAM,IAAN,CAAW,uBAAX,EAAoC,QAApC,CAA6C,MAA7C,EAAqD,IAArD,EAAT;AACD,OAFD,CAEE,OAAO,GAAP,EAAY;AACZ,cAAM,IAAI,KAAJ,CAAU,0DAAV,CAAN;AACD;;AAED,UAAI;AACF,eAAO,sBAAM,IAAN,wBAAgC,MAAhC,EAA0C,QAA1C,CAAmD,MAAnD,EAA2D,IAA3D,EAAP;AACD,OAFD,CAEE,OAAO,GAAP,EAAY;AACZ,cAAM,IAAI,KAAJ,CAAU,iCAAV,CAAN;AACD;;AAED,UAAI;AACF,eAAO,sBAAM,IAAN,CAAW,8BAAX,EAA2C,QAA3C,CAAoD,MAApD,EAA4D,KAA5D,CAAkE,GAAlE,EAAuE,CAAvE,EAA0E,IAA1E,EAAP;AACD,OAFD,CAEE,OAAO,GAAP,EAAY;AACZ,cAAM,IAAI,KAAJ,CAAU,oEAAV,CAAN;AACD;;AAED,UAAI;AACF,cAAS,IAAT,SAAiB,IAAjB;AACA,cAAM,EAAN,CAAS,GAAT;AACD,OAHD,CAGE,OAAO,GAAP,EAAY;AACZ,cAAM,KAAN,CAAY,GAAZ;AACA,cAAM,IAAI,KAAJ,CAAU,8CAAV,CAAN;AACD;AACF;;;SAxDkB,G;;;kBAAA,G","file":"App.js","sourcesContent":["import * as print from '../io/print'\nimport Compose from '../ComposeHelper'\nimport path from 'path'\nimport Shell from '../ShellHelper'\nimport Template from '../TemplateHelper'\n\nconst spawnopts = {\n  env: process.env,\n  stdio: 'inherit'\n}\n\nexport default class App {\n\n  static create(source, dest, context) {\n    if (Shell.exists(path.join(dest, context.name))) {\n      throw new Error('Destination already exists (will not overwrite)')\n    }\n    Template.generate(source, dest, context)\n  }\n\n  static up(options) {\n    Compose.up(spawnopts)\n  }\n\n  static test(options) {\n    Compose.test(spawnopts)\n  }\n\n  static debug(options) {\n    Compose.debug(spawnopts)\n  }\n\n  static production(options) {\n    Compose.production(spawnopts)\n  }\n\n  static url(options) {\n    let active,\n      host,\n      port,\n      url\n\n    try {\n      active = Shell.exec('docker-machine active').toString('utf8').trim()\n    } catch (err) {\n      throw new Error('Make sure that you have set your environment for Docker.')\n    }\n\n    try {\n      host = Shell.exec(`docker-machine ip ${active}`).toString('utf8').trim()\n    } catch (err) {\n      throw new Error('Unable to determine machine IP.')\n    }\n\n    try {\n      port = Shell.exec('docker-compose port web 3000').toString('utf8').split(':')[1].trim()\n    } catch (err) {\n      throw new Error('Make sure you are in the app root and that a container is running.')\n    }\n\n    try {\n      url = `${host}:${port}`\n      print.ln(url)\n    } catch (err) {\n      print.error(err)\n      throw new Error('Make sure that a container is running first.')\n    }\n  }\n}\n"]}