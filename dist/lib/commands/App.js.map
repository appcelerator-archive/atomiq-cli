{"version":3,"sources":["../../../src/lib/commands/App.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAM,YAAY;AAChB,OAAK,QAAQ,GAAR;AACL,SAAO,SAAP;CAFI;;IAKe;;;;;;;2BAEL,QAAQ,MAAM,SAAS;AACnC,+BAAS,QAAT,CAAkB,MAAlB,EAA0B,IAA1B,EAAgC,OAAhC,EADmC;;;;uBAI3B,SAAS;AACjB,8BAAQ,EAAR,CAAW,SAAX,EADiB;;;;yBAIP,SAAS;AACnB,8BAAQ,IAAR,CAAa,SAAb,EADmB;;;;0BAIR,SAAS;AACpB,8BAAQ,KAAR,CAAc,SAAd,EADoB;;;;+BAIJ,SAAS;AACzB,8BAAQ,UAAR,CAAmB,SAAnB,EADyB;;;;wBAIhB,SAAS;AAClB,UAAI,eAAJ;UAAY,aAAZ;UAAkB,aAAlB;UAAwB,YAAxB,CADkB;;AAGlB,UAAI;AACF,iBAAS,sBAAM,IAAN,CAAW,uBAAX,EAAoC,QAApC,CAA6C,MAA7C,EAAqD,IAArD,EAAT,CADE;OAAJ,CAEE,OAAO,GAAP,EAAY;AACZ,cAAM,IAAI,KAAJ,CAAU,0DAAV,CAAN,CADY;OAAZ;;AAIF,UAAI;AACF,eAAO,sBAAM,IAAN,wBAAgC,MAAhC,EAA0C,QAA1C,CAAmD,MAAnD,EAA2D,IAA3D,EAAP,CADE;OAAJ,CAEE,OAAO,GAAP,EAAY;AACZ,cAAM,IAAI,KAAJ,CAAU,iCAAV,CAAN,CADY;OAAZ;;AAIF,UAAI;AACF,eAAO,sBAAM,IAAN,CAAW,8BAAX,EAA2C,QAA3C,CAAoD,MAApD,EAA4D,KAA5D,CAAkE,GAAlE,EAAuE,CAAvE,EAA0E,IAA1E,EAAP,CADE;OAAJ,CAEE,OAAO,GAAP,EAAY;AACZ,cAAM,IAAI,KAAJ,CAAU,oEAAV,CAAN,CADY;OAAZ;;AAIF,UAAI;AACF,cAAS,aAAQ,IAAjB,CADE;AAEF,gBAAQ,GAAR,CAAY,GAAZ,EAFE;OAAJ,CAGE,OAAO,GAAP,EAAY;AACZ,gBAAQ,GAAR,CAAY,GAAZ,EADY;AAEZ,cAAM,IAAI,KAAJ,CAAU,8CAAV,CAAN,CAFY;OAAZ;;;;SA9Ce","file":"App.js","sourcesContent":["import Compose from '../ComposeHelper';\nimport Shell from '../ShellHelper';\nimport Template from '../TemplateHelper';\n\nconst spawnopts = {\n  env: process.env,\n  stdio: 'inherit'\n};\n\nexport default class App {\n\n  static create(source, dest, context) {\n    Template.generate(source, dest, context);\n  }\n\n  static up(options) {\n    Compose.up(spawnopts);\n  }\n\n  static test(options) {\n    Compose.test(spawnopts);\n  }\n\n  static debug(options) {\n    Compose.debug(spawnopts);\n  }\n\n  static production(options) {\n    Compose.production(spawnopts);\n  }\n\n  static url(options) {\n    let active, host, port, url;\n\n    try {\n      active = Shell.exec('docker-machine active').toString('utf8').trim();\n    } catch (err) {\n      throw new Error('Make sure that you have set your environment for Docker.');\n    }\n\n    try {\n      host = Shell.exec(`docker-machine ip ${active}`).toString('utf8').trim();\n    } catch (err) {\n      throw new Error('Unable to determine machine IP.');\n    }\n\n    try {\n      port = Shell.exec('docker-compose port web 3000').toString('utf8').split(':')[1].trim();\n    } catch (err) {\n      throw new Error('Make sure you are in the app root and that a container is running.');\n    }\n\n    try {\n      url = `${host}:${port}`;\n      console.log(url);\n    } catch (err) {\n      console.log(err);\n      throw new Error('Make sure that a container is running first.');\n    }\n  }\n}\n"]}