{"version":3,"sources":["../../../src/lib/commands/Make.js"],"names":[],"mappings":";;;;;;;;AAAA;;IAAY,K;;AACZ;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;AAGA,QAAQ,GAAR,CAAY,IAAZ,GAAmB,eAAK,IAAL,CAAU,eAAK,IAAL,CAAU,SAAV,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,IAAjC,EAAuC,gBAAvC,EAAyD,MAAzD,IAC3B,eAAK,SADsB,GAE3B,QAAQ,GAAR,CAAY,IAFK,CAAnB;;AAIA,IAAM,YAAY;AAChB,OAAK,QAAQ,GADG;AAEhB,SAAO;AAFS,CAAlB;;IAKqB,I;WAAA,I;0BAAA,I;;;eAAA,I;;2BAEZ;AACL,WAAK,OAAL,GAAe,uBAAf;AACA,WAAK,OAAL,CAAa,iBAAb;AACD;;;4BAEO;AACN,4BAAM,EAAN,CAAS,KAAT,EAAgB,QAAhB;AACD;;;2BAEM;AACL,4BAAM,OAAN,CAAc,KAAd,EAAqB,MAArB,EAA6B;AAC3B,iBAAS;AADkB,OAA7B,EAEG;AAAA,eAAK,eAAK,OAAL,CAAa,CAAb,KAAmB,KAAxB;AAAA,OAFH;AAGD;;;4BAEO;AACN,4BAAM,SAAN,CAAgB,KAAhB,EAAuB,MAAvB;AACD;;;4BAEO;AACN,8BAAQ,KAAR,CAAc,SAAd;AACD;;;8BAES;AACR,8BAAQ,OAAR,CAAgB,SAAhB;AACD;;;+BAEU;AACT,YAAM,EAAN,CAAS,gBAAT;AACA,4BAAM,KAAN,CAAY,OAAZ,EAAqB,CAAC,SAAD,EAAY,KAAZ,EAAmB,IAAnB,EAAyB,MAAzB,EAAiC,eAAjC,CAArB,EAAwE,SAAxE;AACD;;;gCAEW;AACV,YAAM,EAAN,CAAS,8EAAT;AACA,4BAAM,KAAN,CAAY,SAAZ,EACE,CAAC,gBAAD,EAAmB,SAAnB,EAA8B,MAA9B,EAAsC,IAAtC,EAA4C,SAA5C,EAAuD,QAAvD,EAAiE,oCAAjE,CADF,EAEE,SAFF;AAGD;;;SAvCkB,I;;;kBAAA,I","file":"Make.js","sourcesContent":["import * as print from '../io/print'\nimport Babel from '../BabelHelper'\nimport Compose from '../ComposeHelper'\nimport path from 'path'\nimport Project from '../Project'\nimport Shell from '../ShellHelper'\n\n// include node_modules/.bin in path, just like 'npm run' scripts\nprocess.env.PATH = path.join(path.join(__dirname, '..', '..', '..', './node_modules', '.bin') +\n  path.delimiter +\n  process.env.PATH)\n\nconst spawnopts = {\n  env: process.env,\n  stdio: 'inherit'\n}\n\nexport default class Make {\n\n  init() {\n    this.project = new Project()\n    this.project.checkValidProject()\n  }\n\n  clean() {\n    Shell.rm('-rf', './dist')\n  }\n\n  dist() {\n    Shell.copyDir('src', 'dist', {\n      recurse: true\n    }, f => path.extname(f) != '.js')\n  }\n\n  babel() {\n    Babel.transform('src', 'dist')\n  }\n\n  build() {\n    Compose.build(spawnopts)\n  }\n\n  rebuild() {\n    Compose.rebuild(spawnopts)\n  }\n\n  watchsrc() {\n    print.ln('spawning babel')\n    Shell.spawn('babel', ['--watch', 'src', '-d', 'dist', '--source-maps'], spawnopts)\n  }\n\n  watchdist() {\n    print.ln('While monitoring, you can also enter \"rs\" in the console to manually restart')\n    Shell.spawn('nodemon',\n      ['--legacy-watch', '--watch', 'dist', '-e', 'js,json', '--exec', 'docker-compose up --force-recreate'],\n      spawnopts)\n  }\n}\n"]}