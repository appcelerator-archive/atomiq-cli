{"version":3,"sources":["../../src/lib/Project.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEqB,O;eAAA,O;;;;;0CAGU;AAC3B,YAAM,IAAI,KAAJ,CAAU,iIAAV,CAAN;AACD;;;;;;iDAGmC;AAClC,YAAM,IAAI,KAAJ,CAAU,8EAAV,CAAN;AACD;;;;;;uCAGyB;AACxB,aAAO,kBAAI,MAAJ,CAAW,gBAAlB;AACD;;;AAED,WAjBmB,OAiBnB,GAAc;AAAA,0BAjBK,OAiBL;;AACZ,SAAK,WAAL,GAAmB,QAAQ,GAAR,EAAnB;AACD;;;;;;;;;;;eAnBkB,O;;wCA4BC;AAClB,UAAI,WAAW,eAAK,IAAL,CAAU,KAAK,WAAf,EAA4B,cAA5B,CAAf;AACA,UAAI,CAAC,sBAAM,MAAN,CAAa,QAAb,CAAL,EAA6B;AAC3B,gBAAQ,mBAAR;AACD;;AAED,UAAI,cAAc,QAAQ,QAAR,CAAlB;AACA,UAAI,EAAE,YAAY,YAAZ,IAA4B,YAAY,YAAZ,CAAyB,MAAvD,CAAJ,EAAoE;AAClE,gBAAQ,mBAAR;AACD,OAFD,MAEO,IAAI,CAAC,iBAAO,SAAP,CAAiB,QAAQ,gBAAR,EAAjB,EAA6C,YAAY,YAAZ,CAAyB,MAAtE,CAAL,EAAoF;AACzF,gBAAQ,0BAAR;AACD;AACF;;;SAxCkB,O;;;kBAAA,O","file":"Project.js","sourcesContent":["import path from 'path'\nimport pkg from '../../package.json'\nimport semver from 'semver'\nimport Shell from './ShellHelper'\n\nexport default class Project {\n\n  /** This tool must be run from the project root and to be a valid project, it must have a dependency on Atomiq */\n  static throwInvalidProject() {\n    throw new Error('This does not appear to be an Atomiq project. Make sure to run commands from the root of a package with a dependency on Atomiq.')\n  }\n\n  /** The project must be compatible with the version of Atomiq that this tool targets */\n  static throwInvalidProjectVersion() {\n    throw new Error('The project depends on a different version of Atomiq than this CLI supports.')\n  }\n\n  /** The version of Atomiq that this tool supports */\n  static supportedVersion() {\n    return pkg.atomiq.supportedVersion\n  }\n\n  constructor() {\n    this.projectRoot = process.cwd()\n  }\n\n  /**\n   * For project related tasks that are supposed to be run at the root\n   * of a project, this method verifies that the process cwd has a package.json\n   * file with a dependency on the version of atomiq that this cli targets.\n   *\n   * @throws if not a valid project\n   */\n  checkValidProject() {\n    let pathname = path.join(this.projectRoot, 'package.json')\n    if (!Shell.exists(pathname)) {\n      Project.throwInvalidProject()\n    }\n\n    let packageFile = require(pathname)\n    if (!(packageFile.dependencies && packageFile.dependencies.atomiq)) {\n      Project.throwInvalidProject()\n    } else if (!semver.satisfies(Project.supportedVersion(), packageFile.dependencies.atomiq)) {\n      Project.throwInvalidProjectVersion()\n    }\n  }\n}\n"]}