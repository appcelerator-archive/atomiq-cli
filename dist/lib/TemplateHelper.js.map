{"version":3,"sources":["../../src/lib/TemplateHelper.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEqB;;;;;;;6BAEH,QAAQ,MAAM,SAAS;AACrC,UAAI,SAAS,QAAQ,IAAR,CADwB;;AAGrC,aAAO,eAAK,IAAL,CAAU,IAAV,EAAgB,MAAhB,CAAP,CAHqC;AAIrC,UAAI,sBAAM,MAAN,CAAa,IAAb,CAAJ,EAAwB;;AAEtB,YAAI,oDAAkD,eAAK,QAAL,CAAc,IAAd,QAAlD,CAFkB;AAGtB,cAAM,IAAI,KAAJ,CAAU,OAAV,CAAN,CAHsB;OAAxB;;AAMA,qBAAe,MAAf,CAAsB,MAAtB,EAA8B,IAA9B,EAAoC,OAApC,EAVqC;;;;2BAazB,QAAQ,MAAM,SAAS;AACnC,4BAAM,KAAN,CAAY,IAAZ,EAAkB,IAAlB,EADmC;AAEnC,UAAI,QAAQ,aAAG,WAAH,CAAe,MAAf,CAAR,CAF+B;AAGnC,YAAM,OAAN,CAAc,aAAK;AACjB,YAAI,UAAU,eAAK,IAAL,CAAU,MAAV,EAAkB,CAAlB,CAAV,CADa;AAEjB,YAAI,QAAQ,aAAG,QAAH,CAAY,OAAZ,CAAR,CAFa;AAGjB,YAAI,MAAM,MAAN,EAAJ,EAAoB;;AAElB,cAAI,EAAE,OAAF,CAAU,SAAV,EAAqB,KAArB,CAAJ,CAFkB;AAGlB,cAAI,WAAW,eAAK,IAAL,CAAU,IAAV,EAAgB,CAAhB,CAAX,CAHc;AAIlB,cAAI,WAAW,aAAG,YAAH,CAAgB,OAAhB,EAAyB,MAAzB,CAAX;;AAJc,cAMd,SAAS,mBAAS,YAAT,CAAsB,QAAtB,EAAgC,OAAhC,CAAT,CANc;AAOlB,uBAAG,aAAH,CAAiB,QAAjB,EAA2B,MAA3B,EAAmC,MAAnC,EAPkB;SAApB,MAQO,IAAI,MAAM,WAAN,EAAJ,EAAyB;AAC9B,yBAAe,MAAf,CAAsB,eAAK,IAAL,CAAU,MAAV,EAAkB,CAAlB,CAAtB,EAA4C,eAAK,IAAL,CAAU,IAAV,EAAgB,CAAhB,CAA5C,EAAgE,OAAhE,EAD8B;SAAzB;OAXK,CAAd,CAHmC;;;;SAflB","file":"TemplateHelper.js","sourcesContent":["import fs from 'fs';\nimport nunjucks from 'nunjucks';\nimport path from 'path';\nimport Shell from './ShellHelper';\n\nexport default class TemplateHelper {\n\n  static generate(source, dest, context) {\n    let appDir = context.name;\n\n    dest = path.join(dest, appDir);\n    if (Shell.exists(dest)) {\n      // TODO: investigate babel bug? explicit string assignment since not interpolated as Error parameter\n      let message = `The target directory already exists (${path.basename(dest)}).`;\n      throw new Error(message);\n    }\n\n    TemplateHelper.render(source, dest, context);\n  }\n\n  static render(source, dest, context) {\n    Shell.mkdir('-p', dest);\n    let files = fs.readdirSync(source);\n    files.forEach(f => {\n      let srcpath = path.join(source, f);\n      let stats = fs.statSync(srcpath);\n      if (stats.isFile()) {\n        // replace initial underscore (used to disable \"special\" file processing, .npmignore and .gitigore)\n        f = f.replace(/^_(.*)$/, '.$1');\n        let destpath = path.join(dest, f);\n        let template = fs.readFileSync(srcpath, 'utf8');\n        //let result = nunjucks.render(path.basename(srcpath), context);\n        let result = nunjucks.renderString(template, context);\n        fs.writeFileSync(destpath, result, 'utf8');\n      } else if (stats.isDirectory()) {\n        TemplateHelper.render(path.join(source, f), path.join(dest, f), context);\n      }\n    });\n  }\n\n\n}\n"]}