{"version":3,"sources":["../../src/lib/BabelHelper.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;;;AAEA,IAAM,iBAAiB;AACrB,cAAY,IADS;AAErB,WAAS,yBAFY;AAGrB,WAAS;AAHY,CAAvB;;IAMqB,W;WAAA,W;0BAAA,W;;;eAAA,W;;8BAEF,M,EAAQ,I,EAAM,O,EAAS;AACtC,4BAAM,KAAN,CAAY,IAAZ,EAAkB,IAAlB;AACA,UAAI,SAAS,SAAT,MAAS;AAAA,eAAK,eAAK,OAAL,CAAa,CAAb,KAAmB,KAAxB;AAAA,OAAb;AACA,UAAI,QAAQ,aAAG,WAAH,CAAe,MAAf,CAAZ;AACA,YAAM,OAAN,CAAc,aAAK;AACjB,YAAI,UAAU,eAAK,IAAL,CAAU,MAAV,EAAkB,CAAlB,CAAd;AACA,YAAI,QAAQ,aAAG,QAAH,CAAY,OAAZ,CAAZ;AACA,YAAI,MAAM,MAAN,MAAkB,OAAO,CAAP,CAAtB,EAAiC;AAC/B,cAAI,WAAW,eAAK,IAAL,CAAU,IAAV,EAAgB,CAAhB,CAAf;AACA,cAAI,YAAe,QAAf,SAAJ;AACA,cAAI,SAAS,kCAAkB,OAAlB,EAA2B,WAAW,cAAtC,CAAb;AACA,uBAAG,aAAH,CAAiB,QAAjB,EAA2B,OAAO,IAAlC,EAAwC,MAAxC;AACA,uBAAG,aAAH,CAAiB,SAAjB,EAA4B,KAAK,SAAL,CAAe,OAAO,GAAtB,CAA5B,EAAwD,MAAxD;AACD,SAND,MAMO,IAAI,MAAM,WAAN,EAAJ,EAAyB;AAC9B,sBAAY,SAAZ,CAAsB,eAAK,IAAL,CAAU,MAAV,EAAkB,CAAlB,CAAtB,EAA4C,eAAK,IAAL,CAAU,IAAV,EAAgB,CAAhB,CAA5C,EAAgE,OAAhE;AACD;AAEF,OAbD;AAcD;;;SApBkB,W;;;kBAAA,W","file":"BabelHelper.js","sourcesContent":["import es2015 from 'babel-preset-es2015'\nimport fs from 'fs'\nimport path from 'path'\nimport Shell from './ShellHelper'\nimport syntaxAsyncFunctions from 'babel-plugin-syntax-async-functions'\nimport { transformFileSync } from 'babel-core'\nimport transformRegenerator from 'babel-plugin-transform-regenerator'\n\nconst defaultOptions = {\n  sourceMaps: true,\n  presets: [es2015],\n  plugins: [syntaxAsyncFunctions, transformRegenerator]\n}\n\nexport default class BabelHelper {\n\n  static transform(source, dest, options) {\n    Shell.mkdir('-p', dest)\n    let filter = f => path.extname(f) == '.js'\n    let files = fs.readdirSync(source)\n    files.forEach(f => {\n      let srcpath = path.join(source, f)\n      let stats = fs.statSync(srcpath)\n      if (stats.isFile() && filter(f)) {\n        let destpath = path.join(dest, f)\n        let sourcemap = `${destpath}.map`\n        let result = transformFileSync(srcpath, options || defaultOptions)\n        fs.writeFileSync(destpath, result.code, 'utf8')\n        fs.writeFileSync(sourcemap, JSON.stringify(result.map), 'utf8')\n      } else if (stats.isDirectory()) {\n        BabelHelper.transform(path.join(source, f), path.join(dest, f), options)\n      }\n\n    })\n  }\n}\n"]}