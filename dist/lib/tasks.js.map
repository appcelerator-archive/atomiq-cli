{"version":3,"sources":["../../src/lib/tasks.js"],"names":[],"mappings":"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","file":"tasks.js","sourcesContent":["/*eslint-disable no-undef, no-console, no-empty, lines-around-comment*/\nconst exec = require('child_process').execSync;\nconst fs = require('fs');\nconst optimist = require('optimist');\nconst path = require('path');\nconst spawn = require('child_process').spawnSync;\n\nconst options = optimist.argv;\n// remove options before loading make or else make will\n// think they're additional targets and complain\nprocess.argv = process.argv.filter(elem => !elem.startsWith('--'));\nrequire('shelljs/make');\n\nconst spawnopts = {\n  env: process.env,\n  stdio: 'inherit'\n};\n\nconst app = path.join('dist', 'app.js');\nconst testDir = path.join('dist', 'test');\n\n// should be run from project root\ncd(__dirname);\n\n// include node_modules/.bin in path, just like 'npm run' scripts\nprocess.env.PATH = path.join(path.join('./node_modules', '.bin') +\n  path.delimiter +\n  process.env.PATH);\n\n// default task\ntarget.all = function() {\n  target.build();\n  target.run();\n};\n\n// clean dist\ntarget.clean = function() {\n  rm('-rf', './dist');\n};\n\ntarget.dist = function() {\n  target.clean();\n  // don't copy js source since babel will do that\n  //let source = ['src/**', '!src/**/*.js'];\n  copyDir('src', 'dist', {\n    recurse: true\n  }, f => path.extname(f) != '.js');\n};\n\nfunction copyDir(source, dest, options, filter) {\n  mkdir('-p', dest);\n  let files = fs.readdirSync(source).filter(filter);\n  files.forEach(f => {\n    let srcpath = path.join(source, f);\n    let stats = fs.statSync(srcpath);\n    if (stats.isFile()) {\n      let destpath = path.join(dest, f);\n      cp(srcpath, destpath);\n      console.log(`${srcpath} -> ${destpath}`);\n    } else if (stats.isDirectory() && options.recurse) {\n      copyDir(path.join(source, f), path.join(dest, f), options, filter);\n    }\n\n  });\n}\n\n// build dist\ntarget.build = function() {\n  target.babel();\n  if (!options.local) {\n    spawn('docker-compose', ['build'], spawnopts);\n  }\n};\n\n// build dist and force docker-compose not to use the cache\ntarget.rebuild = function() {\n  target.babel();\n  if (!options.local) {\n    spawn('docker-compose', ['build', '--force-rm', '--no-cache'], spawnopts);\n  }\n};\n\n// transpile src -> dist with sourcemap files\ntarget.babel = function() {\n  target.dist();\n  spawn('babel', ['src', '-d', 'dist', '--source-maps'], spawnopts);\n};\n\n// transpile src -> dist with inline sourcemaps\ntarget.babelinline = function() {\n  target.dist();\n  spawn('babel', ['src', '-d', 'dist', '--source-maps', 'inline'], spawnopts);\n};\n\n// if anything in src changes, re-transpile to dist\ntarget.watch = function() {\n  target.dist();\n  spawn('babel', ['--watch', 'src', '-d', 'dist', '--source-maps'], spawnopts);\n};\n\n// if anything in dist changes, restart server\ntarget.monitor = function() {\n  if (options.local) {\n    debugReminder();\n    spawn('nodemon',\n      ['--legacy-watch', '--watch', 'dist', '-e', 'js,json', '--exec', 'node ' + app],\n      spawnopts);\n  } else {\n    console.log('remember: while monitoring, you can also enter \"rs\" in the console to manually restart');\n    spawn('nodemon',\n      ['--legacy-watch', '--watch', 'dist', '-e', 'js,json', '--exec', 'docker-compose up --force-recreate'],\n      spawnopts);\n  }\n};\n\n// run mocha tests\ntarget.test = function() {\n  target.babel();\n  if (options.local) {\n    debugReminder();\n    spawn('mocha', [testDir], spawnopts);\n  } else {\n    spawn('docker-compose', ['-f', 'test.yml', 'up', '--force-recreate'], spawnopts);\n  }\n};\n\n// run app\ntarget.run = function() {\n  target.babel();\n  if (options.local) {\n    debugReminder();\n    spawn('node', [app], spawnopts);\n  } else {\n    spawn('docker-compose', ['up', '--force-recreate'], spawnopts);\n  }\n};\n\n// debug app using node inspector\ntarget.debug = function() {\n  target.babel();\n  if (options.local) {\n    debugReminder();\n    spawn('node-debug', ['--no-preload', '--web-host', '0.0.0.0', app], spawnopts);\n  } else {\n    spawn('docker-compose', ['-f', 'debug.yml', 'up', '--force-recreate'], spawnopts);\n  }\n};\n\n// if container is running, get host (ip:port)\ntarget.host = function() {\n  try {\n    let active = exec('docker-machine active').toString('utf8');\n    let host = exec('docker-machine ip ' + active).toString('utf8').trim();\n    let port = exec('docker-compose port web 443').toString('utf8').split(':')[1].trim();\n    console.log('%s:%s', host, port);\n  } catch (err) {\n    console.log('Error: make sure that a container is running first');\n  }\n};\n\nfunction debugReminder() {\n  if (!process.env.DEBUG) {\n    console.log('Make sure to set DEBUG environment variable to see debug output (ex: DEBUG=app*)');\n  }\n}\n"]}